/*
 *
 * This the grammar we used to generate the parser jhGrammar.js
 *   We use the online tool http://pegjs.org/online to generate the  parser
 *   Modifying this file wont affect the program, this just to have a more readable grammar. 
 */

{
  function concat(aray1, aray2){
    Array.prototype.push.apply(aray1, aray2);
    return aray1;
  }

  function makeString(o) {
    return o.join("");
  }
}

start
  = p:prog                                                                             {return p;}
  
prog
  = space* ed:entityDecl space* p:prog                                                 {return {"entities" : concat([ed],p.entities) , "relationships" : p.relationships, "enums" : p.enums};}
  / space* rd:relationDecl space* p:prog                                               {return {"entities" : p.entities, "relationships" : concat([rd],p.relationships), "enums" : p.enums};}
  / space* end:enumDecl space* p:prog                                                  {return {"entities" : p.entities, "relationships" : p.relationships, "enums": concat([end], p.enums)};}
  /                                                                                    {return {"entities" : [],"relationships": [], "enums": []};}                                                                 


//Entities
entityDecl
  = "entity" space* e:ENTITYNAME space* eb:entityBody                                   {return {"name" : e, "body":eb};}          
 
entityBody
  = "{" space* fdl:fieldDeclList space* "}"                                            {return fdl;}
  /                                                                                    {return {};}

fieldDeclList
  = f:FIELDNAME space t:type space* vl:validationList space* "," space* fdl:fieldDeclList {return concat([{"name" : f, "type" : t, "validations" : vl}], fdl );}
  / f:FIELDNAME space t:type space* vl:validationList                                     {return [{"name" : f, "type" : t, "validations" : vl}];}
  /                                                                                    {return [];}                                                

validationList
  = v:validation space* vl:validationList                                              {return concat([v], vl);}                                    
  /                                                                                    {return [];}

//Relationship
relationDecl
  = 'relationship' space rt:relationshipType space* "{" space* rb:relationshipBody space* "}"    {rb.cardinality = rt; return rb;}  

relationshipBody
  = from:relationshipSide "to" space to:relationshipSide                               {return {"from" : from , "to" : to};}

relationshipSide          
  = e:ENTITYNAME space* "{" space* i:INJECTEDFIELDNAME space* "}" space*               {return {"name" :e, "injectedfield" : i};}
  / e:ENTITYNAME space                                                                 {return {"name" :e, "injectedfield" : ""};}


//Enum
enumDecl
  = 'enum' space e:ENUMNAME space* '{' space* el:enumPropList space* '}'                    {return {"name":e, "values" : el };}

enumPropList
  = e:ENUMPROP space* ',' space* el:enumPropList                                       {return concat([e],el);}
  / e:ENUMPROP                                                                         {return [e];} 



relationshipType = "OneToOne" {return "one-to-one";} / "OneToMany" {return "one-to-many";} / "ManyToOne" {return "many-to-one";} / "ManyToMany" {return "many-to-many";}

type "a type" = head:[A-Z]tail:[a-zA-Z0-9]* {return makeString(concat([head],tail));} //we must check afterward if the type is acceptable.

validation 
  = "required"                                                                         {return {key:'required', value:''};}
  / "minlength" space* "(" space* int:INTEGER space* ")"                               {return {key:'minlength', value:int};}
  / "maxlength" space* "(" space* int:INTEGER space* ")"                               {return {key:'maxlength', value:int};}
  / "max" space* "(" space* int:INTEGER space* ")"                                     {return {key:'max', value:int};}
  / "min" space* "(" space* int:INTEGER space* ")"                                     {return {key:'min', value:int};}
  / "pattern" space* "("  apostrophe regexp:REGEXP  apostrophe space* ")"              {return {key:'pattern' , value:regexp};}



apostrophe "apostrophe"
  = a:["|']                    

REGEXP "a regular expression" 
  = word:[a-zA-Z0-9!@#$%^&*()_+\-=\[\]{};':\\|,.<>\/? ]*                               {return makeString(word);}

ENUMNAME "an enum name"
  = head:[A-Z]tail:[a-zA-Z0-9]*                                                        {return makeString(concat([head],tail));}

ENUMPROP "an enum property"
  = word:[A-Z0-9]+                                                                     {return makeString(word);}

INTEGER "integer"
  = int:[0-9]+                                                                         {return parseInt(int.join(""), 10);} 

INJECTEDFIELDNAME "an injected field"
  = head:[a-zA-Z]tail:[a-zA-Z0-9()]*                                                     {return makeString(concat([head],tail));}

ENTITYNAME "an entity name"  
  = head:[A-Z]tail:[a-zA-Z0-9]*                                                        {return makeString(concat([head],tail));}

FIELDNAME "a field name"
  = head:[a-zA-Z]tail:[a-zA-Z0-9]*                                                     {return makeString(concat([head],tail));}               

space "a space"
  = space:['\n'|'\t'|'\r'|' ']+           

